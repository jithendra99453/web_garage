import React, { useState } from 'react';

// Dummy Data
const dummyClasses = [
  {
    id: 1,
    name: "Class 10A",
    tasks: [
      { id: 1, title: "Plant 5 trees", description: "Upload proof of planting trees", dueDate: "2025-09-20", active: true }
    ],
    students: [
      { id: 1, name: "Amit" },
      { id: 2, name: "Priya" },
      { id: 3, name: "Rahul" },
      { id: 4, name: "Sneha" },
      { id: 5, name: "Vikash" }
    ],
    submissions: [
      { id: 101, taskId: 1, studentId: 1, studentName: "Amit", content: "Photo of tree planting with GPS location", status: "pending", submittedDate: "2025-09-15" },
      { id: 102, taskId: 1, studentId: 2, studentName: "Priya", content: "Tree planting report with photos", status: "verified", submittedDate: "2025-09-14" },
      { id: 103, taskId: 1, studentId: 4, studentName: "Sneha", content: "Video of tree planting process", status: "pending", submittedDate: "2025-09-16" }
    ]
  },
  {
    id: 2,
    name: "Class 10B",
    tasks: [
      { id: 2, title: "Water conservation project", description: "Document water saving methods", dueDate: "2025-09-25", active: true }
    ],
    students: [
      { id: 6, name: "Arjun" },
      { id: 7, name: "Kavya" }
    ],
    submissions: [
      { id: 201, taskId: 2, studentId: 6, studentName: "Arjun", content: "Water conservation report", status: "verified", submittedDate: "2025-09-12" }
    ]
  }
];

// Header Component
const Header = ({ teacherName, onLogout }) => {
  return (
    <header style={headerStyles.container}>
      <div style={headerStyles.content}>
        <h1 style={headerStyles.title}>Teacher Dashboard</h1>
        <div style={headerStyles.userSection}>
          <span style={headerStyles.teacherName}>Welcome, {teacherName}</span>
          <button style={headerStyles.logoutBtn} onClick={onLogout}>
            Logout
          </button>
        </div>
      </div>
    </header>
  );
};

const headerStyles = {
  container: {
    backgroundColor: '#2c3e50',
    color: 'white',
    padding: '1rem 0',
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
  },
  content: {
    maxWidth: '1200px',
    margin: '0 auto',
    padding: '0 2rem',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center'
  },
  title: {
    margin: 0,
    fontSize: '1.5rem'
  },
  userSection: {
    display: 'flex',
    alignItems: 'center',
    gap: '1rem'
  },
  teacherName: {
    fontSize: '1rem'
  },
  logoutBtn: {
    backgroundColor: '#e74c3c',
    color: 'white',
    border: 'none',
    padding: '0.5rem 1rem',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '0.9rem',
    transition: 'background-color 0.2s'
  }
};

// Class Selector Component
const ClassSelector = ({ classes, selectedClass, onClassChange }) => {
  return (
    <div style={classSelectorStyles.container}>
      <label style={classSelectorStyles.label}>Select Class:</label>
      <select 
        style={classSelectorStyles.select}
        value={selectedClass?.id || ''}
        onChange={(e) => {
          const classId = parseInt(e.target.value);
          const selectedClass = classes.find(c => c.id === classId);
          onClassChange(selectedClass);
        }}
      >
        <option value="">Choose a class...</option>
        {classes.map(classItem => (
          <option key={classItem.id} value={classItem.id}>
            {classItem.name}
          </option>
        ))}
      </select>
    </div>
  );
};

const classSelectorStyles = {
  container: {
    display: 'flex',
    alignItems: 'center',
    gap: '1rem',
    marginBottom: '1.5rem'
  },
  label: {
    fontSize: '1rem',
    fontWeight: 'bold',
    color: '#2c3e50'
  },
  select: {
    padding: '0.5rem',
    fontSize: '1rem',
    border: '2px solid #ddd',
    borderRadius: '4px',
    backgroundColor: 'white',
    cursor: 'pointer',
    minWidth: '200px'
  }
};

// Current Task Component
const CurrentTask = ({ task }) => {
  if (!task) {
    return (
      <div style={currentTaskStyles.container}>
        <h3 style={currentTaskStyles.title}>No Active Task</h3>
        <p style={currentTaskStyles.noTask}>No active task assigned to this class.</p>
      </div>
    );
  }

  return (
    <div style={currentTaskStyles.container}>
      <h3 style={currentTaskStyles.title}>Current Active Task</h3>
      <div style={currentTaskStyles.taskCard}>
        <h4 style={currentTaskStyles.taskTitle}>{task.title}</h4>
        <p style={currentTaskStyles.description}>{task.description}</p>
        <p style={currentTaskStyles.dueDate}>
          <strong>Due Date:</strong> {new Date(task.dueDate).toLocaleDateString()}
        </p>
      </div>
    </div>
  );
};

const currentTaskStyles = {
  container: {
    marginBottom: '2rem'
  },
  title: {
    color: '#2c3e50',
    marginBottom: '1rem'
  },
  taskCard: {
    backgroundColor: '#f8f9fa',
    padding: '1.5rem',
    borderRadius: '8px',
    border: '1px solid #e9ecef'
  },
  taskTitle: {
    color: '#2c3e50',
    margin: '0 0 0.5rem 0'
  },
  description: {
    color: '#6c757d',
    marginBottom: '1rem'
  },
  dueDate: {
    color: '#2c3e50',
    margin: 0
  },
  noTask: {
    color: '#6c757d',
    fontStyle: 'italic'
  }
};

// Add Task Component
const AddTask = ({ onAddTask }) => {
  const [taskTitle, setTaskTitle] = useState('');
  const [taskDescription, setTaskDescription] = useState('');
  const [dueDate, setDueDate] = useState('');

  const handleSubmit = () => {
    if (!taskTitle.trim()) return;
    
    const newTask = {
      id: Date.now(),
      title: taskTitle.trim(),
      description: taskDescription.trim(),
      dueDate: dueDate || new Date().toISOString().split('T')[0],
      active: true
    };
    
    onAddTask(newTask);
    setTaskTitle('');
    setTaskDescription('');
    setDueDate('');
  };

  return (
    <div style={addTaskStyles.container}>
      <h3 style={addTaskStyles.title}>Add New Task</h3>
      <div style={addTaskStyles.form}>
        <input
          style={addTaskStyles.input}
          type="text"
          placeholder="Task title..."
          value={taskTitle}
          onChange={(e) => setTaskTitle(e.target.value)}
        />
        <input
          style={addTaskStyles.input}
          type="text"
          placeholder="Task description..."
          value={taskDescription}
          onChange={(e) => setTaskDescription(e.target.value)}
        />
        <input
          style={addTaskStyles.input}
          type="date"
          value={dueDate}
          onChange={(e) => setDueDate(e.target.value)}
        />
        <button style={addTaskStyles.button} onClick={handleSubmit}>
          Add Task
        </button>
      </div>
    </div>
  );
};

const addTaskStyles = {
  container: {
    marginBottom: '2rem'
  },
  title: {
    color: '#2c3e50',
    marginBottom: '1rem'
  },
  form: {
    display: 'flex',
    gap: '1rem',
    alignItems: 'end',
    flexWrap: 'wrap'
  },
  input: {
    padding: '0.5rem',
    fontSize: '1rem',
    border: '2px solid #ddd',
    borderRadius: '4px',
    flex: '1',
    minWidth: '150px'
  },
  button: {
    backgroundColor: '#27ae60',
    color: 'white',
    border: 'none',
    padding: '0.5rem 1.5rem',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '1rem',
    transition: 'background-color 0.2s'
  }
};

// Submission Modal Component
const SubmissionModal = ({ submission, onClose, onVerify }) => {
  if (!submission) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={modalStyles.modal} onClick={(e) => e.stopPropagation()}>
        <h3 style={modalStyles.title}>Submission Details</h3>
        <div style={modalStyles.content}>
          <p><strong>Student:</strong> {submission.studentName}</p>
          <p><strong>Submitted:</strong> {new Date(submission.submittedDate).toLocaleDateString()}</p>
          <div style={modalStyles.submissionContent}>
            <strong>Content:</strong>
            <p>{submission.content}</p>
          </div>
        </div>
        <div style={modalStyles.actions}>
          <button 
            style={{...modalStyles.button, ...modalStyles.verifyButton}}
            onClick={() => onVerify(submission.id)}
          >
            Mark as Verified
          </button>
          <button 
            style={{...modalStyles.button, ...modalStyles.cancelButton}}
            onClick={onClose}
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  );
};

const modalStyles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 1000
  },
  modal: {
    backgroundColor: 'white',
    padding: '2rem',
    borderRadius: '8px',
    maxWidth: '500px',
    width: '90%',
    maxHeight: '80%',
    overflow: 'auto'
  },
  title: {
    color: '#2c3e50',
    marginBottom: '1rem'
  },
  content: {
    marginBottom: '1.5rem'
  },
  submissionContent: {
    backgroundColor: '#f8f9fa',
    padding: '1rem',
    borderRadius: '4px',
    marginTop: '1rem'
  },
  actions: {
    display: 'flex',
    gap: '1rem',
    justifyContent: 'flex-end'
  },
  button: {
    padding: '0.5rem 1rem',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '1rem'
  },
  verifyButton: {
    backgroundColor: '#27ae60',
    color: 'white'
  },
  cancelButton: {
    backgroundColor: '#95a5a6',
    color: 'white'
  }
};

// Submission List Component
const SubmissionList = ({ submissions, students, onVerifyClick }) => {
  const pendingSubmissions = submissions.filter(s => s.status === 'pending');
  const verifiedSubmissions = submissions.filter(s => s.status === 'verified');

  return (
    <div style={submissionListStyles.container}>
      <h3 style={submissionListStyles.title}>Submissions</h3>
      
      {/* Pending Submissions */}
      <div style={submissionListStyles.section}>
        <h4 style={submissionListStyles.sectionTitle}>
          Pending Submissions ({pendingSubmissions.length})
        </h4>
        {pendingSubmissions.length === 0 ? (
          <p style={submissionListStyles.empty}>No pending submissions</p>
        ) : (
          <div style={submissionListStyles.list}>
            {pendingSubmissions.map(submission => (
              <div key={submission.id} style={submissionListStyles.item}>
                <div style={submissionListStyles.itemContent}>
                  <strong>{submission.studentName}</strong>
                  <p style={submissionListStyles.itemText}>
                    Submitted: {new Date(submission.submittedDate).toLocaleDateString()}
                  </p>
                </div>
                <button
                  style={{...submissionListStyles.button, ...submissionListStyles.verifyBtn}}
                  onClick={() => onVerifyClick(submission)}
                >
                  Verify
                </button>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Verified Submissions */}
      <div style={submissionListStyles.section}>
        <h4 style={submissionListStyles.sectionTitle}>
          Verified Submissions ({verifiedSubmissions.length})
        </h4>
        {verifiedSubmissions.length === 0 ? (
          <p style={submissionListStyles.empty}>No verified submissions</p>
        ) : (
          <div style={submissionListStyles.list}>
            {verifiedSubmissions.map(submission => (
              <div key={submission.id} style={{...submissionListStyles.item, ...submissionListStyles.verifiedItem}}>
                <div style={submissionListStyles.itemContent}>
                  <strong>{submission.studentName}</strong>
                  <p style={submissionListStyles.itemText}>
                    Verified: {new Date(submission.submittedDate).toLocaleDateString()}
                  </p>
                </div>
                <span style={submissionListStyles.verifiedBadge}>✓ Verified</span>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

const submissionListStyles = {
  container: {
    marginBottom: '2rem'
  },
  title: {
    color: '#2c3e50',
    marginBottom: '1rem'
  },
  section: {
    marginBottom: '2rem'
  },
  sectionTitle: {
    color: '#34495e',
    marginBottom: '1rem',
    fontSize: '1.1rem'
  },
  list: {
    display: 'flex',
    flexDirection: 'column',
    gap: '0.5rem'
  },
  item: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '1rem',
    backgroundColor: '#f8f9fa',
    borderRadius: '4px',
    border: '1px solid #e9ecef'
  },
  verifiedItem: {
    backgroundColor: '#d4edda',
    borderColor: '#c3e6cb'
  },
  itemContent: {
    flex: 1
  },
  itemText: {
    margin: '0.25rem 0 0 0',
    color: '#6c757d',
    fontSize: '0.9rem'
  },
  button: {
    padding: '0.5rem 1rem',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '0.9rem'
  },
  verifyBtn: {
    backgroundColor: '#007bff',
    color: 'white'
  },
  verifiedBadge: {
    color: '#28a745',
    fontWeight: 'bold',
    fontSize: '0.9rem'
  },
  empty: {
    color: '#6c757d',
    fontStyle: 'italic'
  }
};

// Custom Pie Chart Component (SVG-based)
const PieChart = ({ submissions, students }) => {
  const totalStudents = students.length;
  const submittedCount = submissions.length;
  const verifiedCount = submissions.filter(s => s.status === 'verified').length;
  const pendingCount = submissions.filter(s => s.status === 'pending').length;
  const notSubmittedCount = totalStudents - submittedCount;

  const total = verifiedCount + pendingCount + notSubmittedCount;
  
  // Calculate angles for pie slices
  const verifiedAngle = total > 0 ? (verifiedCount / total) * 360 : 0;
  const pendingAngle = total > 0 ? (pendingCount / total) * 360 : 0;
  const notSubmittedAngle = total > 0 ? (notSubmittedCount / total) * 360 : 0;

  // Create SVG path for pie slices
  const createPath = (startAngle, endAngle, radius = 90) => {
    const start = polarToCartesian(100, 100, radius, endAngle);
    const end = polarToCartesian(100, 100, radius, startAngle);
    const largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
    
    return [
      "M", 100, 100,
      "L", start.x, start.y,
      "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y,
      "Z"
    ].join(" ");
  };

  const polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {
    const angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
    return {
      x: centerX + (radius * Math.cos(angleInRadians)),
      y: centerY + (radius * Math.sin(angleInRadians))
    };
  };

  let currentAngle = 0;
  const slices = [];

  if (verifiedCount > 0) {
    slices.push({
      path: createPath(currentAngle, currentAngle + verifiedAngle),
      color: '#28a745',
      label: 'Verified',
      value: verifiedCount
    });
    currentAngle += verifiedAngle;
  }

  if (pendingCount > 0) {
    slices.push({
      path: createPath(currentAngle, currentAngle + pendingAngle),
      color: '#ffc107',
      label: 'Pending',
      value: pendingCount
    });
    currentAngle += pendingAngle;
  }

  if (notSubmittedCount > 0) {
    slices.push({
      path: createPath(currentAngle, currentAngle + notSubmittedAngle),
      color: '#dc3545',
      label: 'Not Submitted',
      value: notSubmittedCount
    });
  }

  return (
    <div style={pieChartStyles.container}>
      <h3 style={pieChartStyles.title}>Submission Status</h3>
      <div style={pieChartStyles.chartContainer}>
        <svg width="200" height="200" style={pieChartStyles.svg}>
          {slices.map((slice, index) => (
            <path
              key={index}
              d={slice.path}
              fill={slice.color}
              stroke="#fff"
              strokeWidth="2"
            />
          ))}
        </svg>
      </div>
      
      {/* Legend */}
      <div style={pieChartStyles.legend}>
        {slices.map((slice, index) => (
          <div key={index} style={pieChartStyles.legendItem}>
            <div 
              style={{
                ...pieChartStyles.legendColor,
                backgroundColor: slice.color
              }}
            ></div>
            <span style={pieChartStyles.legendText}>
              {slice.label}: {slice.value} ({total > 0 ? Math.round((slice.value / total) * 100) : 0}%)
            </span>
          </div>
        ))}
      </div>

      <div style={pieChartStyles.stats}>
        <div style={pieChartStyles.statItem}>
          <span style={pieChartStyles.statLabel}>Total Students:</span>
          <span style={pieChartStyles.statValue}>{totalStudents}</span>
        </div>
        <div style={pieChartStyles.statItem}>
          <span style={pieChartStyles.statLabel}>Submitted:</span>
          <span style={pieChartStyles.statValue}>{submittedCount}</span>
        </div>
      </div>
    </div>
  );
};

const pieChartStyles = {
  container: {
    backgroundColor: 'white',
    padding: '1.5rem',
    borderRadius: '8px',
    border: '1px solid #e9ecef'
  },
  title: {
    color: '#2c3e50',
    marginBottom: '1rem',
    textAlign: 'center'
  },
  chartContainer: {
    display: 'flex',
    justifyContent: 'center',
    marginBottom: '1rem'
  },
  svg: {
    maxWidth: '100%',
    height: 'auto'
  },
  legend: {
    display: 'flex',
    flexDirection: 'column',
    gap: '0.5rem',
    marginBottom: '1rem'
  },
  legendItem: {
    display: 'flex',
    alignItems: 'center',
    gap: '0.5rem'
  },
  legendColor: {
    width: '16px',
    height: '16px',
    borderRadius: '50%'
  },
  legendText: {
    fontSize: '0.9rem',
    color: '#2c3e50'
  },
  stats: {
    display: 'flex',
    justifyContent: 'space-around',
    marginTop: '1rem',
    borderTop: '1px solid #e9ecef',
    paddingTop: '1rem'
  },
  statItem: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: '0.25rem'
  },
  statLabel: {
    fontSize: '0.9rem',
    color: '#6c757d'
  },
  statValue: {
    fontSize: '1.5rem',
    fontWeight: 'bold',
    color: '#2c3e50'
  }
};

// Main Teacher Dashboard Component
const TeacherDashboard = () => {
  const [classes, setClasses] = useState(dummyClasses);
  const [selectedClass, setSelectedClass] = useState(null);
  const [modalSubmission, setModalSubmission] = useState(null);

  const handleAddTask = (newTask) => {
    if (!selectedClass) return;
    
    setClasses(prevClasses => 
      prevClasses.map(cls => 
        cls.id === selectedClass.id 
          ? { ...cls, tasks: [...cls.tasks, newTask] }
          : cls
      )
    );
    
    // Update selected class to reflect changes
    setSelectedClass(prev => ({
      ...prev,
      tasks: [...prev.tasks, newTask]
    }));
  };

  const handleVerifySubmission = (submissionId) => {
    setClasses(prevClasses => 
      prevClasses.map(cls => 
        cls.id === selectedClass.id
          ? {
              ...cls,
              submissions: cls.submissions.map(sub =>
                sub.id === submissionId
                  ? { ...sub, status: 'verified' }
                  : sub
              )
            }
          : cls
      )
    );
    
    // Update selected class
    setSelectedClass(prev => ({
      ...prev,
      submissions: prev.submissions.map(sub =>
        sub.id === submissionId
          ? { ...sub, status: 'verified' }
          : sub
      )
    }));
    
    setModalSubmission(null);
  };

  const currentTask = selectedClass?.tasks.find(task => task.active);

  return (
    <div style={dashboardStyles.container}>
      <Header 
        teacherName="Mr. Sharma" 
        onLogout={() => alert('Logout clicked')}
      />
      
      <main style={dashboardStyles.main}>
        <ClassSelector 
          classes={classes}
          selectedClass={selectedClass}
          onClassChange={setSelectedClass}
        />

        {selectedClass && (
          <>
            <CurrentTask task={currentTask} />
            
            <AddTask onAddTask={handleAddTask} />

            <div style={dashboardStyles.contentGrid}>
              <div style={dashboardStyles.leftColumn}>
                <SubmissionList
                  submissions={selectedClass.submissions}
                  students={selectedClass.students}
                  onVerifyClick={setModalSubmission}
                />
              </div>
              
              <div style={dashboardStyles.rightColumn}>
                <PieChart 
                  submissions={selectedClass.submissions}
                  students={selectedClass.students}
                />
              </div>
            </div>
          </>
        )}

        {!selectedClass && (
          <div style={dashboardStyles.placeholder}>
            <h3>Please select a class to get started</h3>
            <p>Choose a class from the dropdown above to view tasks and submissions.</p>
          </div>
        )}
      </main>

      <SubmissionModal
        submission={modalSubmission}
        onClose={() => setModalSubmission(null)}
        onVerify={handleVerifySubmission}
      />
    </div>
  );
};

const dashboardStyles = {
  container: {
    minHeight: '100vh',
    backgroundColor: '#f5f5f5'
  },
  main: {
    maxWidth: '1200px',
    margin: '0 auto',
    padding: '2rem'
  },
  contentGrid: {
    display: 'grid',
    gridTemplateColumns: '2fr 1fr',
    gap: '2rem',
    marginTop: '2rem'
  },
  leftColumn: {
    minWidth: 0
  },
  rightColumn: {
    minWidth: 0
  },
  placeholder: {
    textAlign: 'center',
    padding: '4rem 2rem',
    color: '#6c757d'
  }
};

export default TeacherDashboard;